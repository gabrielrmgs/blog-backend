quarkus:
    datasource:
        db-kind: postgresql
        username: postgres
        password: postgres
        jdbc:
            url: jdbc:postgresql://localhost:5432/blog
    hibernate-orm:
        database:
            generation:
                drop-and-create
        log:
            sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect

    http:
        cors:
            enabled: true
            cors-origins: http://localhost:3000,http://127.0.0.1:3000
            cors-headers-allowed: Content-Type,Accept,Authorization
            cors-methods: GET,POST,PUT,DELETE

    # Configurações JWT (JSON Web Tokens)
    # É crucial configurar isso corretamente para a segurança.
    # A propriedade 'quarkus.smallrye-jwt.new-token.private-key' pode apontar para um arquivo de chave privada (recomendado em produção)
    # Ou você pode gerar uma string de chave simétrica (menos seguro para produção, mas ok para aprendizado)
    smallrye-jwt:
        # Exemplo simples para desenvolvimento (gerar uma chave secreta base64 codificada)
        # Recomenda-se um secret mais robusto e rotacionável em produção.
        # Você pode gerar uma com: openssl rand -base64 32
        # Ou usar um gerador online e codificar em base64.
        new-token:
            secret: "c2VjcmV0S2V5UGFyYU9zQmxhYmluZ3NQcm9qZXRvCg==" # <-- Substitua por uma chave secreta mais forte!


    # Para a validação de tokens recebidos.
    # Em um cenário real, você configuraria o issuer do seu serviço de auth, key de validação, etc.
    # Para o propósito inicial, o SmallRye JWT pode usar a mesma chave interna para emitir e validar.
    # issuer: "https://seu-dominio.com/auth" # Exemplo de issuer (para validação externa)
    # jwks-uri: "https://seu-dominio.com/auth/certs" # Exemplo para validação com JWKS (JSON Web Key Set)
